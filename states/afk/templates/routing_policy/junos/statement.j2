{#
  NOT IMPLEMENTED:
    - origin-eq
    - afi-safi-in
    - next-hop-in

  MISSING IN OPENCONFIG:
    - large communities
    - match origin-as validity invalid

  TODO:
    - ext-community
#}

{# Device specific mapping #}

{% set PROTOCOLS = {
    "BGP": "bgp",
    "ISIS": "isis",
    "OSPF": "ospf",
    "OSPF3": "ospf3",
    "STATIC": "static",
    "DIRECTLY_CONNECTED": "direct",
  }
%}

{% set L3_PROTOCOLS = {
    "IPV4": "inet",
    "IPV6": "inet6",
}
%}

{% set MAPPING_AFISAFI_FAMILY = {
  "IPV4_UNICAST": "inet",
  "IPV6_UNICAST": "inet6",
  "L2VPN_EVPN": "evpn signaling"
}
%}

{% set ACTION = {
    "ACCEPT_ROUTE": "accept",
    "REJECT_ROUTE": "reject",
  }
%}

{% for afisafi in afisafis %}
{# JunOS doesn't allow to set a route policy on a given AFI/SAFI, so we create a route policy for each AFI/SAFI the route policy is used #}
  {% set auto_gen_rm_name = convert_route_map_name(route_map_name, afisafi) %}
  {% set set_path = "policy-options policy-statement " + auto_gen_rm_name %}
  {% set set_from = "policy-options policy-statement " + auto_gen_rm_name + " term " + sequence + " from"%}
  {% set set_then = "policy-options policy-statement " + auto_gen_rm_name + " term " + sequence + " then"%}
{# Conditions #}

{# Explicitly filter on the AFI/SAFI, to be sure we won't accept a route of another AFI/SAFI#}
  {% if afisafi %}
set {{ set_from }} family {{ MAPPING_AFISAFI_FAMILY[afisafi] }}
  {% endif %}

  {% if conditions and conditions["match-prefix-set"] %}
set {{ set_from }} route-filter-list {{ conditions["match-prefix-set"]["config"]["prefix-set"] }}
    {# Hardcoded to be ISO with SONiC template. TODO: remove once we have SONiC migrated to >= 202111 #}
    {% if route_map_name == "RM-CLOS-IN" and sequence == "10" and conditions["match-prefix-set"]["config"]["prefix-set"] == "PF-ANY_IPV6" %}
set {{ set_then }} next term
    {% endif %}
  {% endif %}

  {% if deep_get(conditions, "config", "install-protocol-eq") %}
set {{ set_from }} protocol {{ PROTOCOLS[conditions["config"]["install-protocol-eq"]] }}
  {% endif %}

  {% if deep_get(conditions, "bgp-conditions", "config", "med-eq") %}
set {{ set_from }} metric {{ conditions["bgp-conditions"]["config"]["med-eq"] }}
  {% endif %}

  {% if deep_get(conditions, "bgp-conditions", "config", "local-pref-eq") %}
set {{ set_from }} local-preference {{ conditions["bgp-conditions"]["config"]["local-pref-eq"] }}
  {% endif %}

  {% if deep_get(conditions, "bgp-conditions", "config", "community-set") %}
set {{ set_from }} community {{ conditions["bgp-conditions"]["config"]["community-set"] }}
  {% endif %}

  {% if deep_get(conditions, "config", "call-policy") %}
set {{ set_from }} policy {{ conditions["config"]["call-policy"] }}
  {% endif %}

{# Actions #}

  {% if deep_get(actions, "bgp-actions", "config", "set-route-origin") %}
set {{ set_then }} origin {{ actions["bgp-actions"]["config"]["set-route-origin"]|lower }}
  {% endif %}

  {% if deep_get(actions, "bgp-actions", "config", "set-local-pref") %}
set {{ set_then }} local-preference {{ actions["bgp-actions"]["config"]["set-local-pref"] }}
  {% endif %}


  {% if deep_get(actions, "bgp-actions", "config", "set-next-hop") %}
    {% if actions["bgp-actions"]["config"]["set-next-hop"] == "SELF" %}
      {%   set next_hop = "self" %}
    {% else %}
      {%   set next_hop = actions["bgp-actions"]["config"]["set-next-hop"] %}
    {% endif %}
set {{ set_then }} next-hop {{ next_hop }}
  {% endif %}

  {% if deep_get(actions, "bgp-actions", "config", "set-med") %}
set {{ set_then }} metric {{ actions["bgp-actions"]["config"]["set-med"] }}
  {% endif %}

  {% if deep_get(actions, "bgp-actions", "set-as-path-prepend") %}
  {% set as_prepend_config = actions["bgp-actions"]["set-as-path-prepend"]["config"] %}
set {{ set_then }} as-path-prepend{{ (" " + as_prepend_config["asn"]|string) * as_prepend_config["repeat-n"] }}
  {% endif  %}

  {% if deep_get(actions, "bgp-actions", "set-community") %}
    {# this one might need some python magic #}
    {# handle "set community none" and other well known communities #}
    {% if actions["bgp-actions"]["set-community"]["config"].get("method") == "INLINE" %}
      {% set auto_generated_community_name = "AUTOGENERATED::" + route_map_name + ":" + sequence %}

delete policy-options community {{ auto_generated_community_name }}

set policy-options community {{ auto_generated_community_name }} members {{ actions["bgp-actions"]["set-community"]["inline"]["config"]["communities"]|join(" members ") }}
set {{ set_then }} community set {{ auto_generated_community_name }}
  {% else %}
      {% set action = "set" %}
      {% for community in actions["bgp-actions"]["set-community"]["reference"]["config"].get("community-set-ref") %}
set {{ set_then }} community {{ action }} {{ community }}
       {% set action = "add" %}
      {% endfor %}
    {% endif %}
  {% endif %}
{# TODO: manage community add vs set ... #}

set {{ set_then }} {{ ACTION[actions["config"]["policy-result"]] }}

{# default #}

{# hardcoded? #}
set {{ set_path }} then reject
{% endfor %}
